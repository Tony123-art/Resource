from __future__ import print_function
import sys
import cv2
import pyautogui
from random import randint

trackerTypes = ['BOOSTING', 'MIL', 'KCF','TLD', 'MEDIANFLOW', 'GOTURN', 'MOSSE', 'CSRT']
 
def write(words):
    cv2.putText(frame,words,(10,10),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)

def createTrackerByName(trackerType):
  # Create a tracker based on tracker name
  if trackerType == trackerTypes[0]:
    tracker = cv2.TrackerBoosting_create()

  elif trackerType == trackerTypes[1]:
    tracker = cv2.TrackerMIL_create()

  elif trackerType == trackerTypes[2]:
    tracker = cv2.TrackerKCF_create()

  elif trackerType == trackerTypes[3]:
    tracker = cv2.TrackerTLD_create()

  elif trackerType == trackerTypes[4]:
    tracker = cv2.TrackerMedianFlow_create()

  elif trackerType == trackerTypes[5]:
    tracker = cv2.TrackerGOTURN_create()

  elif trackerType == trackerTypes[6]:
    tracker = cv2.TrackerMOSSE_create()

  elif trackerType == trackerTypes[7]:
    tracker = cv2.TrackerCSRT_create()

  else:
    tracker = None
    print('Incorrect tracker name')
    print('Available trackers are:')

    for t in trackerTypes:
        print(t)

     

  return tracker
# r"C:\Users\VILASH\Videos\Student Anthem.mp4"
cap = cv2.VideoCapture(0)
success, frame = cap.read()

if not success:

  print('Failed to read video')

  sys.exit(1)
## Select boxes
bboxes = []
colors = [] 

# OpenCV's selectROI function doesn't work for selecting multiple objects in Python
# So we will call this function in a loop till we are done selecting all objects
while True:

  # draw bounding boxes over objects
  # selectROI's default behaviour is to draw box starting from the center
  # when fromCenter is set to false, you can draw box starting from top left corner
  bbox = cv2.selectROI('MultiTracker', frame)
  bboxes.append(bbox)
  colors.append((randint(0, 255), randint(0, 255), randint(0, 255)))
  print("Press q to quit selecting boxes and start tracking")
  print("Press any other key to select next object")
  k = cv2.waitKey(0) & 0xFF
  if (k == 113):
    # x = input("Name : ")
    pass
  # q is pressed
    break

print('Selected bounding boxes {}'.format(bboxes))
# Specify the tracker type
trackerType = "CSRT"    

# Create MultiTracker object
multiTracker = cv2.MultiTracker_create()

# Initialize MultiTracker 
for bbox in bboxes:
  multiTracker.add(createTrackerByName(trackerType), frame, bbox)
# Process video and track objects
while cap.isOpened():
  success, frame = cap.read()
  if not success:
    break
  
  # get updated location of objects in subsequent frames
  success, boxes = multiTracker.update(frame)

  # draw tracked objects
  for i, newbox in enumerate(boxes):
    x = (int(newbox[0]))
    y = (int(newbox[1]))
    w = (int(newbox[2]))
    h = (int(newbox[3]))

    cox =(int(x+x+w)/2)
    coy = (int(y+y+h)/2)
    cx = int(cox)
    cy = int(coy)

    r = (int(w/2))
    cv2.circle(frame,(cx,cy),r,(0,0,255),2)
    

  # show frame
  cv2.imshow('MultiTracker', frame)
  # quit on ESC button
  if cv2.waitKey(1) & 0xFF == 27:  # Esc pressed
    break
