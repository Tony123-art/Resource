
import cv2
import numpy as np

cap = cv2.VideoCapture(0)
myVid = cv2.VideoCapture(r"C:\Users\VILASH\Videos\Yalgaar.mp4")
imgTarget = cv2.imread("p\\p.jpg")
fcc = cv2.VideoWriter_fourcc(*"XVID")
out = cv2.VideoWriter("p.mp4",fcc,20.0,(640,480))

image = ("p\\p.jpg")
video = cv2.VideoCapture("p\\a.mp4")
image = cv2.imread(image)
wt,ht,ct = image.shape


orb = cv2.ORB_create(nfeatures=1000)
kp1, des1 = orb.detectAndCompute(imgTarget, None)

while True:
    ret,frame = video.read()
    frame = cv2.resize(frame,(ht,wt))
    image = cv2.resize(image,(ht,wt))

    u_white = np.array([255,255,255]) 
    l_white = np.array([230,230,230])
    mask = cv2.inRange(frame,l_white,u_white)
    res = cv2.bitwise_and(frame,frame,mask=mask)
    f = frame - res
    f = np.where(f==0 ,image,f)

    success, imgWebcam = cap.read()
    imgAug = imgWebcam.copy()
    kp2, des2 = orb.detectAndCompute(imgWebcam, None)
    success, imgVideo = myVid.read()
    hT, wT, cT = imgTarget.shape
    imgVideo = cv2.resize(imgVideo, (wT, hT))

    bf = cv2.BFMatcher()
    matches = bf.knnMatch(des1, des2, k=2)
    good = []
    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good.append(m)
    print(len(good))
    imgFeatures = cv2.drawMatches(imgTarget, kp1, imgWebcam, kp2, good, None, flags=2)
    if len(good)>15:
        src_pts = np.float32([ kp1[m.queryIdx].pt for m in good]).reshape(-1,1,2)
        dst_pts = np.float32([ kp2[m.trainIdx].pt for m in good]).reshape(-1,1,2)
        matrix, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
        pts = np.float32([ [0,0],[0,hT],[wT,hT],[wT,0] ]).reshape(-1,1,2)
        dst = cv2.perspectiveTransform(pts,matrix)
        img2 = cv2.polylines(imgWebcam,[np.int32(dst)],True,(255,0,255),3, cv2.LINE_AA) # draw polylines
        pts = np.float32([ [0,0],[0,hT],[wT,hT],[wT,0] ]).reshape(-1,1,2)
        dst = cv2.perspectiveTransform(pts,matrix)
        img2 = cv2.polylines(imgWebcam,[np.int32(dst)],True,(255,0,255),3, cv2.LINE_AA) # draw polylines

        f = cv2.resize(f,(ht,wt))
        imgWarp = cv2.warpPerspective(f, matrix, (img2.shape[1], img2.shape[0]))

        maskNew = np.zeros((imgAug.shape[0],imgAug.shape[1]),np.uint8) # create blank image of Augmentation size
        cv2.fillPoly(maskNew,[np.int32(dst)],(255,255,255)) # fill the detected area with white pixels to get mask
        maskInv = cv2.bitwise_not(maskNew) # get inverse mask
        imgAug = cv2.bitwise_and(imgAug, imgAug, mask=maskInv)
        imgAug = cv2.bitwise_or(imgWarp, imgAug) # add final image with warped image
        
    cv2.imshow("frame",imgAug)
    cv2.waitKey(1)