# import cv2
# import os
# import numpy as np
import cv2
import os
import numpy as np

def com(img,img2):
    img2 = cv2.imread(img2,0)

    img1 = img

    orb = cv2.ORB_create(nfeatures=500)
    kp1, des1 = orb.detectAndCompute(img1, None)
    kp2, des2 = orb.detectAndCompute(img2, None)

    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.match(des1, des2,2)
    matches = sorted(matches, key=lambda x:x.distance)

    good_matches = matches[:10]

    src_pts = np.float32([kp1[m.queryIdx].pt for m in good_matches]).reshape(-1,1,2)
    dst_pts = np.float32([kp2[m.trainIdx].pt for m in good_matches]).reshape(-1,1,2)
    M,mask = cv2.findHomography(src_pts,dst_pts,cv2.RANSAC,5)
    matchMask = mask.ravel().tolist()
    h,w = img1.shape[:2]
    pts = np.float32([[0,0],[0,h-1],[w-1,h-1],[w-1,0]]).reshape(-1,1,2)


    dst = cv2.perspectiveTransform(pts,M)
    dst += (w,0)

    draw_params = dict(matchColor = (0,0,255),singlePointColor = None,matchesMask = matchMask,flags = 2)

    img3 = cv2.drawMatches(img1, kp1, img2, kp2, good_matches, None,(0,0,255))

    pts = src_pts[mask==1]
    min_x, min_y = np.int32(pts.min(axis=0))
    max_x, max_y = np.int32(pts.max(axis=0))

    c = img3[min_y:max_y,min_x:max_x]
    cv2.imshow("c",c)
    cv2.rectangle(img1,(min_x, min_y), (max_x,max_y),(0,0,255),2,cv2.LINE_AA)
    cv2.imshow('Matches', img3)
    cv2.imshow('Matche', img1)
    cv2.waitKey(1)

cap = cv2.VideoCapture("p\\pubg.mp4")
while True:
    ret,frame = cap.read()
    imgOriginal = frame.copy()
    img = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    path = r"p\\pubg.png"
    com(imgOriginal,path)
