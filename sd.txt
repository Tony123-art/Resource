import cv2
import os
import numpy as np

img = r"p\\pubg.png"
orb = cv2.ORB_create(nfeatures=1000)
img = cv2.imread(img)

kp1,des1 = orb.detectAndCompute(img,None)
cap = cv2.VideoCapture(r"p\\pubg.mp4")
while True:
    ret,frame = cap.read()
    kp2,des2 = orb.detectAndCompute(frame,None)

    bf = cv2.BFMatcher()
    matches = bf.knnMatch(des2,des1,k=2)
    good = []
    for m,n in matches:
        if m.distance < 0.75*n.distance:
            good.append(m)
    x =len(good)
    print(x)
    if x > 30:
        src_pts = np.float32([kp2[m.queryIdx].pt for m in good]).reshape(-1,1,2)
        dst_pts = np.float32([kp1[m.trainIdx].pt for m in good]).reshape(-1,1,2)
        M,mask = cv2.findHomography(src_pts,dst_pts,cv2.RANSAC,5)
        matchMask = mask.ravel().tolist()
        h,w = frame.shape[:2]
        pts = np.float32([[0,0],[0,h-1],[w-1,h-1],[w-1,0]]).reshape(-1,1,2)
        pts = src_pts[mask==1]
        min_x, min_y = np.int32(pts.min(axis=0))
        max_x, max_y = np.int32(pts.max(axis=0))
        cv2.rectangle(frame,(min_x, min_y), (max_x,max_y),(255,0,0),2,cv2.LINE_AA)
        
    else:
        pass
    ife = cv2.drawMatches(frame,kp2,img,kp1,good,None,flags=2)
    cv2.imshow("imf",ife)
    cv2.imshow("frames",frame)
    if cv2.waitKey(33) == 27: 
        break

  
# De-allocate any associated memory usage 
cv2.destroyAllWindows() 