from PIL import ImageGrab
import cv2
import numpy as np

cap = cv2.VideoCapture(0)

imgTarget = cv2.imread("p\\p.jpg")

video = cv2.VideoCapture(r"C:\Users\VILASH\Videos\cod.mp4")

orb = cv2.ORB_create(nfeatures=1000)
kp1, des1 = orb.detectAndCompute(imgTarget, None)

hT, wT, cT = imgTarget.shape
print(hT,wT)
while True:
    ret,frame = video.read()
    cv2.resize(frame,(hT,wT))

    u_white = np.array([255,255,255]) 
    l_white = np.array([255,255,255])
    mask2 = cv2.inRange(frame,l_white,u_white)
    res = cv2.bitwise_and(frame,frame,mask=mask2)
    res2 = cv2.bitwise_not(res)
    f2 = frame - res


    success, imgWebcam = cap.read()
    imgAug = imgWebcam.copy()
    kp2, des2 = orb.detectAndCompute(imgWebcam, None)
    hT, wT, cT = imgTarget.shape


    bf = cv2.BFMatcher()
    matches = bf.knnMatch(des1, des2, k=2)
    good = []
    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good.append(m)
    imgFeatures = cv2.drawMatches(imgTarget, kp1, imgWebcam, kp2, good, None, flags=2)
    if len(good)>20:
        src_pts = np.float32([ kp1[m.queryIdx].pt for m in good]).reshape(-1,1,2)
        dst_pts = np.float32([ kp2[m.trainIdx].pt for m in good]).reshape(-1,1,2)
        matrix, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

        pts = np.float32([ [0,0],[0,hT],[wT,hT],[wT,0] ]).reshape(-1,1,2)
        dst = cv2.perspectiveTransform(pts,matrix)
        
        img2 = cv2.polylines(imgWebcam,[np.int32(dst)],True,(0,0,0),3, cv2.LINE_AA) # draw polylines
        
        print("frame",frame.shape)
        fi = cv2.resize(f2,(hT ,wT))
        imgWarp = cv2.warpPerspective(fi, matrix, (img2.shape[1], img2.shape[0]))
        f = np.where(imgWarp==0 ,imgAug,imgWarp)

        cv2.imshow("img2",imgFeatures)
        cv2.imshow("augmented",f)
        cv2.waitKey(1)